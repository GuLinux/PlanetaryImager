
cat >&2 <<EOF
You need to copy the MacOSX10.11.sdk.tar.xz into this folder to get the cross compiler working.
Instructions:
Download xcode fron https://developer.apple.com/download/more/, choosing version 7.3
    git clone https://github.com/tpoechtrager/osxcross
    ./tools/gen_sdk_package_darling_dmg.sh Xcode_7.3.dmg
EOF


cat <<EOF
FROM ubuntu:18.04
RUN apt-get update && apt-get install -y git build-essential cmake clang wget autoconf automake libtool-bin libtool pkg-config genisoimage libz-dev python-pip qtbase5-dev-tools && \
    git clone https://github.com/tpoechtrager/osxcross && \
    git clone https://github.com/planetbeing/libdmg-hfsplus && \
    cd /libdmg-hfsplus && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr && \
    make && make install && cd / && \
    pip install ds-store mac_alias

COPY MacOSX10.11.sdk.tar.xz /osxcross/tarballs/
RUN cd /osxcross && UNATTENDED=1 ./build.sh
ENV PATH=/osxcross/target/bin:\${PATH} CC=o64-clang CXX=o64-clang++-libc++ MACOSX_DEPLOYMENT_TARGET=10.11 UNATTENDED=1 AR=x86_64-apple-darwin15-ar RANLIB=x86_64-apple-darwin15-ranlib
RUN osxcross-macports install openssl qt5 boost
EOF

LIBUSB_CONFIGURE_OPTS="--host=x86_64-apple-darwin15"
. ../commons/Dockerfile.libusb.in

cat <<EOF
#RUN apt-get purge -y gcc

RUN cd / && \
    wget -q http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio3410.tar.gz && \
    tar xf cfitsio3410.tar.gz && \
    rm cfitsio3410.tar.gz && \
    cd /cfitsio && \
    ./configure --host=x86_64-apple-darwin12 --prefix=/opt/cfitsio && \
    make install && \
    cd / && rm -rf cfitsio
    
RUN cd / && \
    wget -q https://heasarc.gsfc.nasa.gov/fitsio/CCfits/CCfits-2.5.tar.gz && \
    tar xf CCfits-2.5.tar.gz && \
    rm -f CCfits-2.5.tar.gz && \
    cd /CCfits && \
    ./configure --host=x86_64-apple-darwin12 --prefix=/opt/CCfits --with-cfitsio=/opt/cfitsio --enable-static --disable-shared && \
    make install && \
    cd / && \
    rm -rf /CCfits

RUN find  /osxcross/target/macports/pkgs/opt/local/libexec/qt5/lib/cmake/ -name *.cmake -exec sed -i 's|"/opt|"/osxcross/target/macports/pkgs/opt|g' {} \;

COPY osxcross-toolchain.cmake osx-packaging fix_libraries.py DS_Store /

RUN cd / && wget -q https://github.com/opencv/opencv/archive/3.2.0.tar.gz && \
    tar xf 3.2.0.tar.gz && rm -f 3.2.0.tar.gz && \
    cd opencv-3.2.0 && mkdir build && cd build && \
    cmake ../ -DCMAKE_TOOLCHAIN_FILE=/osxcross-toolchain.cmake -DCMAKE_INSTALL_PREFIX=/opt/opencv -DCMAKE_BUILD_TYPE=Release -DBUILD_PERF_TESTS=Off -DBUILD_TESTS=Off -DBUILD_SHARED_LIBS=Off && \
    make all install && \
    cd / && rm -rf opencv-3.2.0

WORKDIR /build
ENV CMAKE_EXTRA_OPTIONS -DCMAKE_INSTALL_PREFIX=/Contents -DCMAKE_TOOLCHAIN_FILE=/osxcross-toolchain.cmake
ENV PACKAGE_COMMAND=/osx-packaging
RUN ln -s /osxcross/target/macports/pkgs/opt/local /opt/local
EOF

#http://stackoverflow.com/questions/286419/how-to-build-a-dmg-mac-os-x-file-on-a-non-mac-platform

#genisoimage -V progname -D -R -apple -no-pad -o progname.dmg dmgdir 

